class PriorityQueue {
  constructor(){
      this.values = [];
  }
  enqueue(val, priority){
      this.values.push({val, priority});
      this.sort();
  };
  dequeue(){
      return this.values.shift();
  };
  sort(){
      this.values.sort((a,b) => a.priority - b.priority);
  };
}

class WeightedGraph {
  constructor(){
      this.adjacencyList = {};
  }
  addVertex(vertex){
      if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
  }
  addEdge(vertex1, vertex2, weight){
      this.adjacencyList[vertex1].push({node: vertex2, weight});
      this.adjacencyList[vertex2].push({node: vertex1, weight});
  }
  Dijkstra(startVert, endVert){
      const distances = {};
      const queue = new PriorityQueue();
      const previous = {};
      var length = this.adjacencyList.length;

      distances[startVert] = 0;
      queue.enqueue(startVert, 0);
      this.adjacencyList.forEach((vertex) => {            
          if(vertex != startVert){
              distances[vertex] = infinity;
              queue.enqueue(vertex, infinity);
          }
          previous[vertex] = null;
      });
      while(length){
          let next = queue.dequeue();
          if(next === endVert) return distances;
          for(let i = 0; i < length; i++){
              for(let j = 0; j < length[i].length; j++){
                  
              }
          }
      }
  }
}

let wg =  new WeightedGraph();
wg.addVertex("A");
wg.addVertex("B");
wg.addVertex("C");
wg.addVertex("D");
wg.addEdge("A", "B", 9);
wg.addEdge("A", "C", 4);
wg.addEdge("D", "C", 5);