class PriorityQueue {
  constructor(){
      this.values = [];
  }
  enqueue(val, priority){
      this.values.push({val, priority});
      this.sort();
  };
  dequeue(){
      return this.values.shift();
  };
  sort(){
      this.values.sort((a,b) => a.priority - b.priority);
  };
}

class WeightedGraph {
  constructor(){
      this.adjacencyList = {};
  }
  addVertex(vertex){
      if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
  }
  addEdge(vertex1, vertex2, weight){
      this.adjacencyList[vertex1].push({node: vertex2, weight});
      this.adjacencyList[vertex2].push({node: vertex1, weight});
  }
}

let wg =  new WeightedGraph();
wg.addVertex("A");
wg.addVertex("B");
wg.addVertex("C");
wg.addVertex("D");
wg.addEdge("A", "B", 9);
wg.addEdge("A", "C", 4);
wg.addEdge("D", "C", 5);